{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService, router, dialog) {\n      this.authService = authService;\n      this.router = router;\n      this.dialog = dialog;\n    }\n\n    intercept(req, next) {\n      const user = this.authService.getCurrentUser();\n\n      if (user && user.token) {\n        const cloned = req.clone({\n          headers: req.headers.set('Authorization', 'Bearer ' + user.token)\n        });\n        return next.handle(cloned).pipe(tap(() => {}, err => {\n          if (err instanceof HttpErrorResponse) {\n            if (err.status === 401) {\n              this.dialog.closeAll();\n              this.router.navigate(['/auth/login']);\n            }\n          }\n        }));\n      } else {\n        return next.handle(req);\n      }\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatDialog));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { NGXLogger } from 'ngx-logger';\nimport * as i0 from \"@angular/core\";\nexport let GlobalErrorHandler = /*#__PURE__*/(() => {\n  class GlobalErrorHandler {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    handleError(error) {\n      // Obtain dependencies at the time of the error\n      // This is because the GlobalErrorHandler is registered first\n      // which prevents constructor dependency injection\n      const logger = this.injector.get(NGXLogger);\n      const err = {\n        message: error.message ? error.message : error.toString(),\n        stack: error.stack ? error.stack : ''\n      }; // Log  the error\n\n      logger.error(err); // Re-throw the error\n\n      throw error;\n    }\n\n  }\n\n  GlobalErrorHandler.ɵfac = function GlobalErrorHandler_Factory(t) {\n    return new (t || GlobalErrorHandler)(i0.ɵɵinject(i0.Injector));\n  };\n\n  GlobalErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalErrorHandler,\n    factory: GlobalErrorHandler.ɵfac\n  });\n  return GlobalErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}
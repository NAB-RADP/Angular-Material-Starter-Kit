{"ast":null,"code":"import { delay, map } from 'rxjs/operators';\nimport * as moment from 'moment';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, localStorage) {\n      this.http = http;\n      this.localStorage = localStorage;\n    }\n\n    login(email, password) {\n      return of(true).pipe(delay(1000), map(() => {\n        // set token property\n        // const decodedToken = jwt_decode(response['token']);\n        // store email and jwt token in local storage to keep user logged in between page refreshes\n        this.localStorage.setItem('currentUser', JSON.stringify({\n          token: 'aisdnaksjdn,axmnczm',\n          isAdmin: true,\n          email: 'john.doe@gmail.com',\n          id: '12312323232',\n          alias: 'john.doe@gmail.com'.split('@')[0],\n          expiration: moment().add(1, 'days').toDate(),\n          fullName: 'John Doe'\n        }));\n        return true;\n      }));\n    }\n\n    logout() {\n      // clear token remove user from local storage to log user out\n      this.localStorage.removeItem('currentUser');\n    }\n\n    getCurrentUser() {\n      // TODO: Enable after implementation\n      // return JSON.parse(this.localStorage.getItem('currentUser'));\n      return {\n        token: 'aisdnaksjdn,axmnczm',\n        isAdmin: true,\n        email: 'john.doe@gmail.com',\n        id: '12312323232',\n        alias: 'john.doe@gmail.com'.split('@')[0],\n        expiration: moment().add(1, 'days').toDate(),\n        fullName: 'John Doe'\n      };\n    }\n\n    passwordResetRequest(email) {\n      return of(true).pipe(delay(1000));\n    }\n\n    changePassword(email, currentPwd, newPwd) {\n      return of(true).pipe(delay(1000));\n    }\n\n    passwordReset(email, token, password, confirmPassword) {\n      return of(true).pipe(delay(1000));\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('LOCALSTORAGE'));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}